
% @brief: loads a geometry generated by the alg_geometry_generator script
% @param {string} geometry_file : full path to the txt file
% @return {array[struct]} boundaries : returns an array of boundary structs
function boundaries = util_load_geometry( geometry_file )

	fileHandle = fopen( geometry_file, 'r' );

	% Read the boundaries %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	for q = 1 : 4

	    boundaries( q ).xx = [];
	    boundaries( q ).yy = [];
	    
	    while ( true )
	        
	        tline = fgetl( fileHandle );
	        if strcmp( tline, '---' )
	            % go to next boundary
	            break
	        end
	        
	        if ischar( tline )
	            xy = str2num( tline );
	            boundaries( q ).xx( end + 1 ) = xy( 1 );
	            boundaries( q ).yy( end + 1 ) = xy( 2 );
	        end

	    end

	    b_size = size( boundaries( q ).xx );
	    len_i = b_size( 2 );
	    boundaries( q ).size = len_i;

	end
	% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% correct the direction of the boundaries %%%%%%%%%%%%%%%%%%%%%%%%%%%
	% left must go from bottom to top
	% top must go from left to right
	boundaries( 1 ).xx = flip( boundaries( 1 ).xx );
	boundaries( 1 ).yy = flip( boundaries( 1 ).yy );

	boundaries( 4 ).xx = flip( boundaries( 4 ).xx );
	boundaries( 4 ).yy = flip( boundaries( 4 ).yy );
	% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	% define each boundary using piecewise segments %%%%%%%%%%%%%%%%%%%%%
	for q = 1 : 4
	    boundaries( q ).x_geo = [];
	    boundaries( q ).y_geo = [];
	    
	    % calculate udir and len
	    for i = 1 : ( boundaries( q ).size - 1 )
	        x_p0 = boundaries( q ).xx( i );
	        x_p1 = boundaries( q ).xx( i + 1 );
	        y_p0 = boundaries( q ).yy( i );
	        y_p1 = boundaries( q ).yy( i + 1 );
	        
	        dx = x_p1 - x_p0; dy = y_p1 - y_p0;
	        len = sqrt( dx^2 + dy^2 );
	        
	        if len == 0
	            disp( 'util_load_geometry> warning, len is 0, maybe repeated point' )
	        end
	        
	        ux = dx / len; uy = dy / len;
	        l_geo_x = [x_p0, ux, len];
	        l_geo_y = [y_p0, uy, len];
	        
	        boundaries( q ).x_geo( end + 1, : ) = l_geo_x;
	        boundaries( q ).y_geo( end + 1, : ) = l_geo_y;
	    end
	end
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end